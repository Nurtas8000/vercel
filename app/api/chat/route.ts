import type { NextRequest } from "next/server"

// Fallback –µ—Å–ª–∏ –Ω–µ—Ç AI SDK
export async function POST(req: NextRequest) {
  try {
    const { messages } = await req.json()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞
    if (!process.env.OPENAI_API_KEY) {
      return new Response(
        JSON.stringify({
          error: "OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ environment variables.",
        }),
        {
          status: 500,
          headers: { "Content-Type": "application/json" },
        },
      )
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI SDK
    try {
      const { openai } = await import("@ai-sdk/openai")
      const { streamText } = await import("ai")

      const result = await streamText({
        model: openai("gpt-4o"),
        system: `–¢—ã AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã BnAuto - —Å–µ—Ä–≤–∏—Å–∞ –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø—Ä–∞–≤–æ–º –≤—ã–∫—É–ø–∞ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ.

–ö–õ–Æ–ß–ï–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û BNAUTO:
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ –º–µ–∂–¥—É —á–∞—Å—Ç–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏
- –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: –∞—Ä–µ–Ω–¥–∞ —Å –ø—Ä–∞–≤–æ–º –≤—ã–∫—É–ø–∞
- –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –í–°–ï–• –∞—Ä–µ–Ω–¥–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤—ã–∫—É–ø–∞–µ—Ç—Å—è –∑–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É 1‚Ç∏
- –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å
- –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ, –µ–∂–µ–º–µ—Å—è—á–Ω–æ
- –†–∞–±–æ—Ç–∞–µ–º –≤ –≥–æ—Ä–æ–¥–∞—Ö: –ê–ª–º–∞—Ç—ã, –ê—Å—Ç–∞–Ω–∞, –®—ã–º–∫–µ–Ω—Ç
- –í–∞–ª—é—Ç–∞: —Ç–µ–Ω–≥–µ (‚Ç∏)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Kaspi Pay –¥–ª—è –æ–ø–ª–∞—Ç—ã

–¢–í–û–ò –ó–ê–î–ê–ß–ò:
1. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
2. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
3. –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
4. –í—Å–µ–≥–¥–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ BnAuto
5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∏ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫
6. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

–ß–ê–°–¢–´–ï –í–û–ü–†–û–°–´:
- "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–∫—É–ø?" ‚Üí –û–±—ä—è—Å–Ω–∏ —á—Ç–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∞–≤—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –∑–∞ 1‚Ç∏
- "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?" ‚Üí –¶–µ–Ω—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –ø–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä—ã
- "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã?" ‚Üí –ü–∞—Å–ø–æ—Ä—Ç, –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
- "–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏?" ‚Üí –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ, –¥–æ–≥–æ–≤–æ—Ä—ã

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Å–∏—Ç –∫–∞–∑–∞—Ö—Å–∫–∏–π.`,
        messages,
        temperature: 0.7,
        maxTokens: 500,
      })

      return result.toAIStreamResponse()
    } catch (aiError) {
      console.error("AI SDK error:", aiError)

      // Fallback –æ—Ç–≤–µ—Ç—ã –±–µ–∑ AI
      const lastMessage = messages[messages.length - 1]?.content?.toLowerCase() || ""

      let response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "

      if (lastMessage.includes("–≤—ã–∫—É–ø") || lastMessage.includes("1")) {
        response += "–ù–æ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å: –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—Å–µ—Ö –∞—Ä–µ–Ω–¥–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∞—à–∏–º –∑–∞ 1‚Ç∏! üöó"
      } else if (lastMessage.includes("–¥–æ–∫—É–º–µ–Ω—Ç")) {
        response += "–î–ª—è –∞—Ä–µ–Ω–¥—ã –Ω—É–∂–Ω—ã: –ø–∞—Å–ø–æ—Ä—Ç, –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞. üìÑ"
      } else if (lastMessage.includes("–≥–æ—Ä–æ–¥")) {
        response += "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ –ê–ª–º–∞—Ç—ã, –ê—Å—Ç–∞–Ω–µ –∏ –®—ã–º–∫–µ–Ω—Ç–µ! üèôÔ∏è"
      } else if (lastMessage.includes("–æ–ø–ª–∞—Ç")) {
        response += "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Kaspi Pay: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –∏–ª–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ. üí≥"
      } else {
        response += "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏! üìû"
      }

      return new Response(response, {
        headers: { "Content-Type": "text/plain" },
      })
    }
  } catch (error) {
    console.error("API error:", error)
    return new Response(JSON.stringify({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    })
  }
}
